name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'CHANGELOG.md'
    tags:
      - 'v*'
      - '!*-*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  defaultBranch: main

jobs:
  build:
    name: Package Module
    runs-on: windows-latest
    outputs:
      moduleVersion: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'

      - name: Calculate ModuleVersion (GitVersion)
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: true

      - name: Build & Package Module
        shell: pwsh
        run: |
          ./build.ps1 -ResolveDependency -tasks pack
        env:
          ModuleVersion: ${{ steps.gitversion.outputs.nuGetVersionV2 }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}/
          retention-days: 7

  test:
    name: Test on Windows
    runs-on: windows-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - displayName: 'Windows PowerShell 5.1'
            pwsh: false
            artifactName: 'CodeCoverageWinPS51'
          - displayName: 'Windows PowerShell 7.x'
            pwsh: true
            artifactName: 'CodeCoverageWinPS7'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Run Tests (${{ matrix.displayName }})
        shell: pwsh
        run: |
          ./build.ps1 -tasks test
        env:
          PWSH: ${{ matrix.pwsh }}

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results (${{ matrix.displayName }})
          path: '${{ env.buildFolderName }}/${{ env.testResultFolderName }}/NUnit*.xml'
          reporter: java-junit

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.artifactName }}
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/
          retention-days: 30

  code-coverage:
    name: Publish Code Coverage
    runs-on: windows-latest
    needs: test
    if: always()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Download Test Artifacts (PS 5.1)
        uses: actions/download-artifact@v4
        with:
          name: CodeCoverageWinPS51
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}

      - name: Download Test Artifacts (PS 7.x)
        uses: actions/download-artifact@v4
        with:
          name: CodeCoverageWinPS7
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}

      # Optional: Merge code coverage files if supported by build configuration
      # - name: Merge Code Coverage Files
      #   shell: pwsh
      #   run: |
      #     ./build.ps1 -tasks merge

      # Optional: Upload to Codecov
      # - name: Upload Coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./${{ env.buildFolderName }}/${{ env.testResultFolderName }}/JaCoCo_coverage.xml
      #     flags: unit
      #     name: codecov-umbrella

  deploy:
    name: Deploy Module
    runs-on: windows-latest
    needs: [build, test]
    if: |
      github.ref == 'refs/heads/main' || 
      startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Publish Release
        shell: pwsh
        run: |
          ./build.ps1 -tasks publish
        env:
          GitHubToken: ${{ secrets.GITHUB_TOKEN }}
          GalleryApiToken: ${{ secrets.GALLERY_API_TOKEN }}
          ReleaseBranch: ${{ env.defaultBranch }}
          MainGitBranch: ${{ env.defaultBranch }}

      - name: Create Changelog PR
        shell: pwsh
        run: |
          ./build.ps1 -tasks Create_ChangeLog_GitHub_PR
        env:
          GitHubToken: ${{ secrets.GITHUB_TOKEN }}
          ReleaseBranch: ${{ env.defaultBranch }}
          MainGitBranch: ${{ env.defaultBranch }}
        continue-on-error: true